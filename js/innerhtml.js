Array.from || (Array.from = (function () { var t = Object.prototype.toString, e = function (e) { return "function" == typeof e || "[object Function]" === t.call(e) }, r = function (t) { var e = Number(t); return isNaN(e) ? 0 : 0 !== e && isFinite(e) ? (e > 0 ? 1 : -1) * Math.floor(Math.abs(e)) : e }, n = Math.pow(2, 53) - 1, o = function (t) { var e = r(t); return Math.min(Math.max(e, 0), n) }; return function (t) { var r = this, n = Object(t); if (null === t) throw new TypeError("Array.from requires an array-like object - not null or undefined"); var a, i = arguments.length > 1 ? arguments[1] : void 0; if (void 0 !== i) { if (!e(i)) throw new TypeError("Array.from: when provided, the second argument must be a function"); arguments.length > 2 && (a = arguments[2]) } for (var u, c = o(n.length), f = e(r) ? Object(new r(c)) : new Array(c), l = 0; l < c;)u = n[l], f[l] = i ? void 0 === a ? i(u, l) : i.call(a, u, l) : u, l += 1; return f.length = c, f } })()); var saferInnerHTML = function (t, e, r) { "use strict"; var n = null, o = function (t, e) { e.forEach((function (e) { "class" === e.att ? t.className = e.value : "data-" === e.att.slice(0, 5) ? t.setAttribute(e.att, e.value || "") : t[e.att] = e.value || "" })) }, a = function (t) { return Array.from(t).map((function (t) { return { att: t.name, value: t.value } })) }, i = function (t) { var e = "text" === t.type ? document.createTextNode(t.content) : document.createElement(t.type); return o(e, t.atts), t.children.length > 0 ? t.children.forEach((function (t) { e.appendChild(i(t)) })) : "text" !== t.type && (e.textContent = t.content), e }, u = function (t) { var e = []; return Array.from(t.childNodes).forEach((function (t) { e.push({ content: t.childNodes && t.childNodes.length > 0 ? null : t.textContent, atts: 3 === t.nodeType ? [] : a(t.attributes), type: 3 === t.nodeType ? "text" : t.tagName.toLowerCase(), children: u(t) }) })), e }; if (!t) throw new Error("safeInnerHTML: Please provide a valid element to inject content into"); if (!(function () { if (!Array.from || !window.DOMParser) return !1; n = n || new DOMParser; try { n.parseFromString("x", "text/html") } catch (t) { return !1 } return !0 })()) throw new Error("safeInnerHTML: Your browser is not supported."); !(function (e) { r || (t.innerHTML = ""), e.forEach((function (e, r) { t.appendChild(i(e)) })) })(u(function (t) { return n = n || new DOMParser, n.parseFromString(t, "text/html").body }(e))) };